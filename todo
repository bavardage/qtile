----------
Comparison with awesome
 # seamless restart
 # move by direction
 # prompt DONE
 # fullscreen
 # minimise  


--------------


Other ideas

 # layout modifiers - instead of layouts actually placing each window, they just set some internal dict of coords. All window coordinates are then passed to layoutmodifiers or something, which i.e. mirror the coords and other fun things.



BUGS

- simulate_keypress doesn't seem to work from qsh at the moment.


FEATURES

- Extend the GroupBox widget to:
    - Indicate an urgent request if the urgent flag is passed to
      PropertyNotify.
- A system tray widget.
- A graph widget for showing percentages over time.
- Obey window size hints, to the extent where we don't make windows larger than
  the requested size. We must, however, make windows smaller if needs be, to
  fit in with the layout. 
- Make logging subsystem nicer.
    - Make information logged for events clearer and maybe remotely parseable.
      The porcelain layer can take care of displaying this nicely.
    - Allow log to link events to specific windows, and then let the user
      filter.
    - Timestamps. This will allow us to implement things like a polling log
      tail.
- Extend the information written by the crash report subsystem. Think about the
  privacy implications of some of that.
- A way to send qsh output to a pager (maybe pipe to shell functionality, so
  the user can go "log | less"?).
- We need a function that checks a configuration file for obvious errors. This
  will be used to sanity-check config before a manager restart is triggered.
- A nice way to navigate groups and screens in qsh. Essentially, a porcelain
  layer on top of our base command set.
    - Divide porcelain and non-porcelain functions into different help
      sections.
- We need a mechanism for saving WM running state to window properties, and
  re-reading this on restart.
- Column resizing for the Stack layout.
- A modal interface.


FUTURE

- Move to a safer object serialisation protocol. Despite the ominous warning
  against un-marshalling untrusted data in the Python docs, I believe that the
  worst an attacker could do is cause the interpreter to crash. None the less,
  since we're using marshalled data pretty much everywhere, we should find an
  obviously safe protocol. One option:
    
    http://barnesc.blogspot.com/2006/01/rencode-reduced-length-encodings.html
    http://www.connellybarnes.com/code/python/rencode
